name: V2Ray GitHunter

on:
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode'
        required: false
        default: false
        type: boolean
      max_results:
        description: 'Maximum results per search'
        required: false
        default: '100'
        type: string
      max_workers:
        description: 'Maximum parallel workers'
        required: false
        default: '10'
        type: string
  push:
    branches: [ main ]

permissions:
  contents: write
  actions: read

jobs:
  hunt:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create cache directory
      run: |
        mkdir -p cache
        mkdir -p data/sources
        mkdir -p data/links
        mkdir -p output

    - name: Cache GitHub API responses
      uses: actions/cache@v4
      with:
        path: cache/
        key: ${{ runner.os }}-githunter-cache-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-githunter-cache-

    - name: Run GitHunter
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Build command arguments
        ARGS=""

        if [ "${{ github.event.inputs.test_mode }}" = "true" ] || [ "${{ github.event_name }}" = "push" ]; then
          ARGS="$ARGS --test-mode"
        fi

        if [ -n "${{ github.event.inputs.max_results }}" ]; then
          ARGS="$ARGS --max-results ${{ github.event.inputs.max_results }}"
        fi

        if [ -n "${{ github.event.inputs.max_workers }}" ]; then
          ARGS="$ARGS --max-workers ${{ github.event.inputs.max_workers }}"
        fi

        echo "Running with arguments: $ARGS"
        python main.py $ARGS

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: githunter-results
        path: |
          output/
          data/links/
        retention-days: 30

    - name: Commit and push results
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update proxy configurations - $(date '+%Y-%m-%d %H:%M:%S')"
          git push origin main
        fi

    - name: Generate summary
      if: always()
      run: |
        if [ -f "output/summary.json" ]; then
          echo "## 📊 Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Extract key metrics
          TOTAL_REPOS=$(jq -r '.total_repositories_found' output/summary.json)
          SOURCES_FETCHED=$(jq -r '.sources_fetched' output/summary.json)
          LINKS_EXTRACTED=$(jq -r '.links_extracted' output/summary.json)

          echo "- **Total Repositories Found:** $TOTAL_REPOS" >> $GITHUB_STEP_SUMMARY
          echo "- **Sources Fetched:** $SOURCES_FETCHED" >> $GITHUB_STEP_SUMMARY
          echo "- **Links Extracted:** $LINKS_EXTRACTED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List output files
          echo "### 📁 Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          jq -r '.output_files[]' output/summary.json | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        fi
