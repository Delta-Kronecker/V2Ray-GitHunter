{"timestamp": 1761861268.6086078, "results": [{"name": "5ubscrpt10n", "full_name": "sevcator/5ubscrpt10n", "owner": "sevcator", "description": "\u26a1 The largest subscription that have vless / vmess / trojan / shadowsocks configs", "about": "The Subscriptions updating every hour Found a new source to obtain subscriptions? Tell it in Repository Issues You need a software that supports these protocols and has a Subscription function Just co", "html_url": "https://github.com/sevcator/5ubscrpt10n", "clone_url": "https://github.com/sevcator/5ubscrpt10n.git", "stars": 59, "forks": 4, "language": "JavaScript", "created_at": "2025-01-26T09:08:50+00:00", "updated_at": "2025-10-30T21:23:41+00:00", "size": 44575255, "topics": ["config", "configs", "free-proxy", "free-vpn", "freevpn", "proxy", "shadowsocks", "subscription", "subscriptions", "trojan", "v2ray", "virtual-private-network", "vless", "vmess", "vpn", "xray"], "search_keyword": "shadowsocks configs"}, {"name": "TG-Proxy-Parser", "full_name": "ndsphonemy/TG-Proxy-Parser", "owner": "ndsphonemy", "description": "Python multithreading parser that parses Vmess, Vless, Reality, Trojan, ShadowSocks, Hysteria-1, Hysteria-2, Tuic, Juicity, Naive, Nekoray, Nekobox, Husi, Exclave, Karing, Wireguard and Socks(4-5) proxy configs from telegram channels.", "about": "TGProxyParser Python multithreading parser that parses Vmess, Vless, Reality, Trojan, ShadowSocks, Hysteria1, Hysteria2, Tuic, Juicity, Naive, Nekoray, Nekobox, Husi, Exclave, Karing, Wireguard and So", "html_url": "https://github.com/ndsphonemy/TG-Proxy-Parser", "clone_url": "https://github.com/ndsphonemy/TG-Proxy-Parser.git", "stars": 44, "forks": 6, "language": "Python", "created_at": "2023-12-10T20:40:38+00:00", "updated_at": "2025-09-05T01:35:11+00:00", "size": 8300, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "proxy-to-singbox-converter", "full_name": "4n0nymou3/proxy-to-singbox-converter", "owner": "4n0nymou3", "description": "Proxy to Sing-box Converter is a web-based tool for converting proxy configs to Sing-box format and vice versa. Supports VMess, VLESS, Trojan, Hysteria2, Shadowsocks, links, and Base64 data.", "about": "Proxy to Singbox Converter \ud83d\ude80 Project Overview Proxy to Singbox Converter is a webbased tool designed to simplify the process of converting various proxy configurations to the Singbox format and vice v", "html_url": "https://github.com/4n0nymou3/proxy-to-singbox-converter", "clone_url": "https://github.com/4n0nymou3/proxy-to-singbox-converter.git", "stars": 43, "forks": 15, "language": "JavaScript", "created_at": "2025-02-06T23:10:19+00:00", "updated_at": "2025-10-26T09:55:39+00:00", "size": 483, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "oh-my-shadowsocks", "full_name": "duoduo369/oh-my-shadowsocks", "owner": "duoduo369", "description": "shadowsocks config on server, supervisor support", "about": "Usage \u514b\u9686\u9879\u76ee\u5230 /opt/shadowsocks git clone https://github.com/duoduo369/ohmyshadowsocks.git /opt/shadowsocks sudo aptget install pythonpip pip install r requirements.txt \u4fee\u6539conf.json\u91cc\u9762\u7684password \u5982\u679c\u4e0d\u7528supervi", "html_url": "https://github.com/duoduo369/oh-my-shadowsocks", "clone_url": "https://github.com/duoduo369/oh-my-shadowsocks.git", "stars": 32, "forks": 10, "language": "Shell", "created_at": "2015-01-06T17:23:29+00:00", "updated_at": "2023-06-23T14:26:18+00:00", "size": 4347, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "SurfSocks", "full_name": "Incognito-Coder/SurfSocks", "owner": "Incognito-Coder", "description": "SurfShark Shadowsocks/Clash Config Generator", "about": "Instructions This script was written to build a proxy list of Surfshark service servers. \\ Change Host2Ip for bypass censorship \\ To work with the script, you need a password and a port from the accou", "html_url": "https://github.com/Incognito-Coder/SurfSocks", "clone_url": "https://github.com/Incognito-Coder/SurfSocks.git", "stars": 26, "forks": 9, "language": "PHP", "created_at": "2021-08-06T06:20:16+00:00", "updated_at": "2025-05-17T00:54:28+00:00", "size": 291, "topics": ["vpn", "vpn-server", "shadowsocks", "php7", "php-cli", "surfshark", "php", "clash", "clash-net", "clashforwindows", "clash-for-android", "shadowsocks-libev"], "search_keyword": "shadowsocks configs"}, {"name": "VPNet", "full_name": "AcrossFW/VPNet", "owner": "AcrossFW", "description": "All in ONE, ZERO config solution for ShadowSocks/PPTP/VPN/SSH Tunnel Servers' setup", "about": "VPNet !CircleCIhttps://circleci.com/gh/AcrossFW/VPNet.svg?style=svghttps://circleci.com/gh/AcrossFW/VPNet !https://images.microbadger.com/badges/image/acrossfw/vpnet.svghttps://microbadger.com/images/", "html_url": "https://github.com/AcrossFW/VPNet", "clone_url": "https://github.com/AcrossFW/VPNet.git", "stars": 26, "forks": 7, "language": "Shell", "created_at": "2016-09-08T17:55:59+00:00", "updated_at": "2025-10-06T21:30:20+00:00", "size": 251, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "haproxy_443", "full_name": "izhaohui/haproxy_443", "owner": "izhaohui", "description": "a haproxy config file that allow ssh\u3001shadowsocks\u3001ocserv\u3001nginx share 443(https) port.", "about": "Haproxy 443 port share configure A haproxy config file that allow ssh\u3001shadowsocks\u3001ocserv\u3001nginx share 443https port. HAPROXY \u63a5\u7ba1 443 \u7aef\u53e3\uff0c\u5176\u4ed6\u7a0b\u5e8f\u76d1\u542c\u672c\u673a\u7684\u5176\u4ed6\u7aef\u53e3 \u901a\u8fc7 SSL \u63e1\u624b\u548c SNI \u5339\u914d HTTPS \u8bf7\u6c42\u8f6c\u53d1\u5230 NGINX \u5176\u4ed6 SSL \u63e1\u624b\u8bf7\u6c42\u8f6c\u53d1 OC", "html_url": "https://github.com/izhaohui/haproxy_443", "clone_url": "https://github.com/izhaohui/haproxy_443.git", "stars": 20, "forks": 16, "language": null, "created_at": "2016-05-31T11:38:36+00:00", "updated_at": "2024-12-06T10:24:36+00:00", "size": 2, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "free_ss", "full_name": "gucong3000/free_ss", "owner": "gucong3000", "description": "free shadowsocks config sync", "about": "freess =============== !AppVeyorhttps://img.shields.io/appveyor/ci/gucong3000/freess.svg?&label=Windowshttps://ci.appveyor.com/project/gucong3000/freess > \u514d\u8d39Shadowsockshttps://github.com/shadowsocks/s", "html_url": "https://github.com/gucong3000/free_ss", "clone_url": "https://github.com/gucong3000/free_ss.git", "stars": 17, "forks": 6, "language": "JavaScript", "created_at": "2016-03-02T10:42:39+00:00", "updated_at": "2020-02-09T02:26:05+00:00", "size": 43, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "a01361.github.io", "full_name": "a01361/a01361.github.io", "owner": "a01361", "description": "#!/usr/bin/env bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin export PATH #=================================================================# #   System Required:  CentOS 6+, Debian 7+, Ubuntu 12+            # #   Description: One click Install Shadowsocks-Python server      # #   Author: Teddysun <i@teddysun.com>                             # #   Thanks: @clowwindy <https://twitter.com/clowwindy>            # #   Intro:  https://teddysun.com/342.html                         # #=================================================================#  clear echo echo \"#############################################################\" echo \"# One click Install Shadowsocks-Python server               #\" echo \"# Intro: https://teddysun.com/342.html                      #\" echo \"# Author: Teddysun <i@teddysun.com>                         #\" echo \"# Github: https://github.com/shadowsocks/shadowsocks        #\" echo \"#############################################################\" echo  libsodium_file=\"libsodium-1.0.16\" libsodium_url=\"https://github.com/jedisct1/libsodium/releases/download/1.0.16/libsodium-1.0.16.tar.gz\"  # Current folder cur_dir=`pwd` # Stream Ciphers ciphers=( aes-256-gcm aes-192-gcm aes-128-gcm aes-256-ctr aes-192-ctr aes-128-ctr aes-256-cfb aes-192-cfb aes-128-cfb camellia-128-cfb camellia-192-cfb camellia-256-cfb chacha20-ietf-poly1305 chacha20-ietf chacha20 rc4-md5 ) # Color red='\\033[0;31m' green='\\033[0;32m' yellow='\\033[0;33m' plain='\\033[0m'  # Make sure only root can run our script [[ $EUID -ne 0 ]] && echo -e \"[${red}Error${plain}] This script must be run as root!\" && exit 1  # Disable selinux disable_selinux(){     if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then         sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config         setenforce 0     fi }  #Check system check_sys(){     local checkType=$1     local value=$2      local release=''     local systemPackage=''      if [[ -f /etc/redhat-release ]]; then         release=\"centos\"         systemPackage=\"yum\"     elif cat /etc/issue | grep -Eqi \"debian\"; then         release=\"debian\"         systemPackage=\"apt\"     elif cat /etc/issue | grep -Eqi \"ubuntu\"; then         release=\"ubuntu\"         systemPackage=\"apt\"     elif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then         release=\"centos\"         systemPackage=\"yum\"     elif cat /proc/version | grep -Eqi \"debian\"; then         release=\"debian\"         systemPackage=\"apt\"     elif cat /proc/version | grep -Eqi \"ubuntu\"; then         release=\"ubuntu\"         systemPackage=\"apt\"     elif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then         release=\"centos\"         systemPackage=\"yum\"     fi      if [[ ${checkType} == \"sysRelease\" ]]; then         if [ \"$value\" == \"$release\" ]; then             return 0         else             return 1         fi     elif [[ ${checkType} == \"packageManager\" ]]; then         if [ \"$value\" == \"$systemPackage\" ]; then             return 0         else             return 1         fi     fi }  # Get version getversion(){     if [[ -s /etc/redhat-release ]]; then         grep -oE  \"[0-9.]+\" /etc/redhat-release     else         grep -oE  \"[0-9.]+\" /etc/issue     fi }  # CentOS version centosversion(){     if check_sys sysRelease centos; then         local code=$1         local version=\"$(getversion)\"         local main_ver=${version%%.*}         if [ \"$main_ver\" == \"$code\" ]; then             return 0         else             return 1         fi     else         return 1     fi }  # Get public IP address get_ip(){     local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )     [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )     [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )     [ ! -z ${IP} ] && echo ${IP} || echo }  get_char(){     SAVEDSTTY=`stty -g`     stty -echo     stty cbreak     dd if=/dev/tty bs=1 count=1 2> /dev/null     stty -raw     stty echo     stty $SAVEDSTTY }  # Pre-installation settings pre_install(){     if check_sys packageManager yum || check_sys packageManager apt; then         # Not support CentOS 5         if centosversion 5; then             echo -e \"$[{red}Error${plain}] Not supported CentOS 5, please change to CentOS 6+/Debian 7+/Ubuntu 12+ and try again.\"             exit 1         fi     else         echo -e \"[${red}Error${plain}] Your OS is not supported. please change OS to CentOS/Debian/Ubuntu and try again.\"         exit 1     fi     # Set shadowsocks config password     echo \"Please enter password for shadowsocks-python\"     read -p \"(Default password: teddysun.com):\" shadowsockspwd     [ -z \"${shadowsockspwd}\" ] && shadowsockspwd=\"teddysun.com\"     echo     echo \"---------------------------\"     echo \"password = ${shadowsockspwd}\"     echo \"---------------------------\"     echo     # Set shadowsocks config port     while true     do     dport=$(shuf -i 9000-19999 -n 1)     echo \"Please enter a port for shadowsocks-python [1-65535]\"     read -p \"(Default port: ${dport}):\" shadowsocksport     [ -z \"$shadowsocksport\" ] && shadowsocksport=${dport}     expr ${shadowsocksport} + 1 &>/dev/null     if [ $? -eq 0 ]; then         if [ ${shadowsocksport} -ge 1 ] && [ ${shadowsocksport} -le 65535 ] && [ ${shadowsocksport:0:1} != 0 ]; then             echo             echo \"---------------------------\"             echo \"port = ${shadowsocksport}\"             echo \"---------------------------\"             echo             break         fi     fi     echo -e \"[${red}Error${plain}] Please enter a correct number [1-65535]\"     done      # Set shadowsocks config stream ciphers     while true     do     echo -e \"Please select stream cipher for shadowsocks-python:\"     for ((i=1;i<=${#ciphers[@]};i++ )); do         hint=\"${ciphers[$i-1]}\"         echo -e \"${green}${i}${plain}) ${hint}\"     done     read -p \"Which cipher you'd select(Default: ${ciphers[0]}):\" pick     [ -z \"$pick\" ] && pick=1     expr ${pick} + 1 &>/dev/null     if [ $? -ne 0 ]; then         echo -e \"[${red}Error${plain}] Please enter a number\"         continue     fi     if [[ \"$pick\" -lt 1 || \"$pick\" -gt ${#ciphers[@]} ]]; then         echo -e \"[${red}Error${plain}] Please enter a number between 1 and ${#ciphers[@]}\"         continue     fi     shadowsockscipher=${ciphers[$pick-1]}     echo     echo \"---------------------------\"     echo \"cipher = ${shadowsockscipher}\"     echo \"---------------------------\"     echo     break     done      echo     echo \"Press any key to start...or Press Ctrl+C to cancel\"     char=`get_char`     # Install necessary dependencies     if check_sys packageManager yum; then         yum install -y python python-devel python-setuptools openssl openssl-devel curl wget unzip gcc automake autoconf make libtool     elif check_sys packageManager apt; then         apt-get -y update         apt-get -y install python python-dev python-setuptools openssl libssl-dev curl wget unzip gcc automake autoconf make libtool     fi     cd ${cur_dir} }  # Download files download_files(){     # Download libsodium file     if ! wget --no-check-certificate -O ${libsodium_file}.tar.gz ${libsodium_url}; then         echo -e \"[${red}Error${plain}] Failed to download ${libsodium_file}.tar.gz!\"         exit 1     fi     # Download Shadowsocks file     if ! wget --no-check-certificate -O shadowsocks-master.zip https://github.com/shadowsocks/shadowsocks/archive/master.zip; then         echo -e \"[${red}Error${plain}] Failed to download shadowsocks python file!\"         exit 1     fi     # Download Shadowsocks init script     if check_sys packageManager yum; then         if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks -O /etc/init.d/shadowsocks; then             echo -e \"[${red}Error${plain}] Failed to download shadowsocks chkconfig file!\"             exit 1         fi     elif check_sys packageManager apt; then         if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-debian -O /etc/init.d/shadowsocks; then             echo -e \"[${red}Error${plain}] Failed to download shadowsocks chkconfig file!\"             exit 1         fi     fi }  # Config shadowsocks config_shadowsocks(){     cat > /etc/shadowsocks.json<<-EOF {     \"server\":\"0.0.0.0\",     \"server_port\":${shadowsocksport},     \"local_address\":\"127.0.0.1\",     \"local_port\":1080,     \"password\":\"${shadowsockspwd}\",     \"timeout\":300,     \"method\":\"${shadowsockscipher}\",     \"fast_open\":false } EOF }  # Firewall set firewall_set(){     echo -e \"[${green}Info${plain}] firewall set start...\"     if centosversion 6; then         /etc/init.d/iptables status > /dev/null 2>&1         if [ $? -eq 0 ]; then             iptables -L -n | grep -i ${shadowsocksport} > /dev/null 2>&1             if [ $? -ne 0 ]; then                 iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${shadowsocksport} -j ACCEPT                 iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${shadowsocksport} -j ACCEPT                 /etc/init.d/iptables save                 /etc/init.d/iptables restart             else                 echo -e \"[${green}Info${plain}] port ${shadowsocksport} has already been set up.\"             fi         else             echo -e \"[${yellow}Warning${plain}] iptables looks like shutdown or not installed, please manually set it if necessary.\"         fi     elif centosversion 7; then         systemctl status firewalld > /dev/null 2>&1         if [ $? -eq 0 ]; then             firewall-cmd --permanent --zone=public --add-port=${shadowsocksport}/tcp             firewall-cmd --permanent --zone=public --add-port=${shadowsocksport}/udp             firewall-cmd --reload         else             echo -e \"[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable port ${shadowsocksport} manually if necessary.\"         fi     fi     echo -e \"[${green}Info${plain}] firewall set completed...\" }  # Install Shadowsocks install(){     # Install libsodium     if [ ! -f /usr/lib/libsodium.a ]; then         cd ${cur_dir}         tar zxf ${libsodium_file}.tar.gz         cd ${libsodium_file}         ./configure --prefix=/usr && make && make install         if [ $? -ne 0 ]; then             echo -e \"[${red}Error${plain}] libsodium install failed!\"             install_cleanup             exit 1         fi     fi      ldconfig     # Install Shadowsocks     cd ${cur_dir}     unzip -q shadowsocks-master.zip     if [ $? -ne 0 ];then         echo -e \"[${red}Error${plain}] unzip shadowsocks-master.zip failed! please check unzip command.\"         install_cleanup         exit 1     fi      cd ${cur_dir}/shadowsocks-master     python setup.py install --record /usr/local/shadowsocks_install.log      if [ -f /usr/bin/ssserver ] || [ -f /usr/local/bin/ssserver ]; then         chmod +x /etc/init.d/shadowsocks         if check_sys packageManager yum; then             chkconfig --add shadowsocks             chkconfig shadowsocks on         elif check_sys packageManager apt; then             update-rc.d -f shadowsocks defaults         fi         /etc/init.d/shadowsocks start     else         echo         echo -e \"[${red}Error${plain}] Shadowsocks install failed! please visit https://teddysun.com/342.html and contact.\"         install_cleanup         exit 1     fi      clear     echo     echo -e \"Congratulations, Shadowsocks-python server install completed!\"     echo -e \"Your Server IP        : \\033[41;37m $(get_ip) \\033[0m\"     echo -e \"Your Server Port      : \\033[41;37m ${shadowsocksport} \\033[0m\"     echo -e \"Your Password         : \\033[41;37m ${shadowsockspwd} \\033[0m\"     echo -e \"Your Encryption Method: \\033[41;37m ${shadowsockscipher} \\033[0m\"     echo     echo \"Welcome to visit:https://teddysun.com/342.html\"     echo \"Enjoy it!\"     echo }  # Install cleanup install_cleanup(){     cd ${cur_dir}     rm -rf shadowsocks-master.zip shadowsocks-master ${libsodium_file}.tar.gz ${libsodium_file} }  # Uninstall Shadowsocks uninstall_shadowsocks(){     printf \"Are you sure uninstall Shadowsocks? (y/n) \"     printf \"\\n\"     read -p \"(Default: n):\" answer     [ -z ${answer} ] && answer=\"n\"     if [ \"${answer}\" == \"y\" ] || [ \"${answer}\" == \"Y\" ]; then         ps -ef | grep -v grep | grep -i \"ssserver\" > /dev/null 2>&1         if [ $? -eq 0 ]; then             /etc/init.d/shadowsocks stop         fi         if check_sys packageManager yum; then             chkconfig --del shadowsocks         elif check_sys packageManager apt; then             update-rc.d -f shadowsocks remove         fi         # delete config file         rm -f /etc/shadowsocks.json         rm -f /var/run/shadowsocks.pid         rm -f /etc/init.d/shadowsocks         rm -f /var/log/shadowsocks.log         if [ -f /usr/local/shadowsocks_install.log ]; then             cat /usr/local/shadowsocks_install.log | xargs rm -rf         fi         echo \"Shadowsocks uninstall success!\"     else         echo         echo \"uninstall cancelled, nothing to do...\"         echo     fi }  # Install Shadowsocks-python install_shadowsocks(){     disable_selinux     pre_install     download_files     config_shadowsocks     if check_sys packageManager yum; then         firewall_set     fi     install     install_cleanup }  # Initialization step action=$1 [ -z $1 ] && action=install case \"$action\" in     install|uninstall)         ${action}_shadowsocks         ;;     *)         echo \"Arguments error! [${action}]\"         echo \"Usage: `basename $0` [install|uninstall]\"     ;; esac", "about": "", "html_url": "https://github.com/a01361/a01361.github.io", "clone_url": "https://github.com/a01361/a01361.github.io.git", "stars": 5, "forks": 4, "language": "Shell", "created_at": "2018-05-22T02:27:32+00:00", "updated_at": "2023-01-02T13:41:18+00:00", "size": 5, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "shadowsocks", "full_name": "hoyojo/shadowsocks", "owner": "hoyojo", "description": "#! /bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin export PATH #=============================================================================================== #   System Required:  CentOS6.x (32bit/64bit) #   Description:  Install Shadowsocks(Python) for CentOS #   Author: Teddysun <i@teddysun.com> #   Intro:  http://teddysun.com/342.html #===============================================================================================  clear echo \"#############################################################\" echo \"# Install Shadowsocks(Python) for CentOS6.x (32bit/64bit)\" echo \"# Intro: http://teddysun.com/342.html\" echo \"#\" echo \"# Author: Teddysun <i@teddysun.com>\" echo \"#\" echo \"#############################################################\" echo \"\"  # Get IP address IP=`ifconfig | grep 'inet addr:'| grep -v '127.0.0.*' | cut -d: -f2 | awk '{ print $1}' | head -1`;  # Install Shadowsocks function install_shadowsocks(){     rootness     disable_selinux     pre_install     download_files     config_shadowsocks     iptables_set     install }  # Make sure only root can run our script function rootness(){ if [[ $EUID -ne 0 ]]; then    echo \"Error:This script must be run as root!\" 1>&2    exit 1 fi }  # Disable selinux function disable_selinux(){ if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then     sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config     setenforce 0 fi }  # Pre-installation settings function pre_install(){     #Set shadowsocks config password     echo \"Please input password for shadowsocks:\"     read -p \"(Default password: teddysun.com):\" shadowsockspwd     if [ \"$shadowsockspwd\" = \"\" ]; then         shadowsockspwd=\"teddysun.com\"     fi     echo \"password:$shadowsockspwd\"     echo \"####################################\"     get_char(){         SAVEDSTTY=`stty -g`         stty -echo         stty cbreak         dd if=/dev/tty bs=1 count=1 2> /dev/null         stty -raw         stty echo         stty $SAVEDSTTY     }     echo \"\"     echo \"Press any key to start...or Press Ctrl+C to cancel\"     char=`get_char`     #Install necessary dependencies     yum install -y wget unzip openssl-devel gcc swig python python-devel python-setuptools autoconf libtool libevent     yum install -y automake make curl curl-devel zlib-devel openssl-devel perl perl-devel cpio expat-devel gettext-devel     #Current folder     cur_dir=`pwd`     cd $cur_dir }  # Download files function download_files(){     if [ -f ez_setup.py ]; then         echo \"ez_setup.py [found]\"     else         echo \"ez_setup.py not found!!!download now......\"         if ! wget --no-check-certificate https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py; then             echo \"Failed to download ez_setup.py!\"             exit 1         fi     fi     # Download shadowsocks chkconfig file     if ! wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks -O /etc/init.d/shadowsocks; then         echo \"Failed to download shadowsocks chkconfig file!\"         exit 1     fi }  # Config shadowsocks function config_shadowsocks(){     cat > /etc/shadowsocks.json<<-EOF {     \"server\":\"${IP}\",     \"server_port\":8989,     \"local_address\": \"127.0.0.1\",     \"local_port\":1080,     \"password\":\"${shadowsockspwd}\",     \"timeout\":600,     \"method\":\"aes-256-cfb\",     \"fast_open\":false,     \"workers\":1 } EOF }  # iptables set function iptables_set(){     /sbin/service iptables status 1>/dev/null 2>&1     if [ $? -eq 0 ]; then         /etc/init.d/iptables status | grep '8989' | grep 'ACCEPT' >/dev/null 2>&1         if [ $? -ne 0 ]; then             /sbin/iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT             /etc/rc.d/init.d/iptables save             /etc/init.d/iptables restart         fi     fi }  # Install  function install(){     which pip > /dev/null 2>&1     if [ $? -ne 0 ]; then         python ez_setup.py install         easy_install pip     fi     if [ -f /usr/bin/pip ]; then         pip install M2Crypto         pip install greenlet         pip install gevent         pip install shadowsocks         if [ -f /usr/bin/ssserver ]; then             chmod +x /etc/init.d/shadowsocks             # Add run on system start up             chkconfig --add shadowsocks             chkconfig shadowsocks on             # Run shadowsocks in the background             /etc/init.d/shadowsocks start         else             echo \"\"             echo \"Shadowsocks install failed! Please visit http://teddysun.com/342.html and contact.\"             exit 1         fi         clear         echo \"\"         echo \"Congratulations, shadowsocks install completed!\"         echo -e \"Your Server IP: \\033[41;37m ${IP} \\033[0m\"         echo -e \"Your Server Port: \\033[41;37m 8989 \\033[0m\"         echo -e \"Your Password: \\033[41;37m ${shadowsockspwd} \\033[0m\"         echo -e \"Your Local IP: \\033[41;37m 127.0.0.1 \\033[0m\"         echo -e \"Your Local Port: \\033[41;37m 1080 \\033[0m\"         echo -e \"Your Encryption Method: \\033[41;37m aes-256-cfb \\033[0m\"         echo \"\"         echo \"Welcome to visit:http://teddysun.com/342.html\"         echo \"Enjoy it!\"         echo \"\"     else         echo \"\"         echo \"pip install failed! Please visit http://teddysun.com/342.html and contact.\"         exit 1     fi }  # Uninstall Shadowsocks function uninstall_shadowsocks(){     printf \"Are you sure uninstall Shadowsocks? (y/n) \"     printf \"\\n\"     read -p \"(Default: n):\" answer     if [ -z $answer ]; then         answer=\"n\"     fi     if [ \"$answer\" = \"y\" ]; then         NODE_PID=`ps -ef | grep -v grep | grep -v ps | grep -i '/usr/bin/python /usr/bin/ssserver' | awk '{print $2}'`         if [ ! -z $NODE_PID ]; then             for pid in $NODE_PID             do                 kill -9 $pid                 if [ $? -eq 0 ]; then                     echo \"Shadowsocks process[$pid] has been killed\"                 fi             done         fi         chkconfig --del shadowsocks         # delete config file         rm -f /etc/shadowsocks.json         rm -f /var/run/shadowsocks.pid         rm -f /etc/init.d/shadowsocks         pip uninstall -y shadowsocks         if [ $? -eq 0 ]; then             echo \"Shadowsocks uninstall success!\"         else             echo \"Shadowsocks uninstall failed!\"         fi     else         echo \"uninstall cancelled, Nothing to do\"     fi }  # Initialization step action=$1 [  -z $1 ] && action=install case \"$action\" in install)     install_shadowsocks     ;; uninstall)     uninstall_shadowsocks     ;; *)     echo \"Arguments error! [${action} ]\"     echo \"Usage: `basename $0` {install|uninstall}\"     ;; esac", "about": "", "html_url": "https://github.com/hoyojo/shadowsocks", "clone_url": "https://github.com/hoyojo/shadowsocks.git", "stars": 4, "forks": 3, "language": null, "created_at": "2014-07-09T12:47:35+00:00", "updated_at": "2021-04-29T14:25:13+00:00", "size": 128, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "fuckgfw", "full_name": "wb14123/fuckgfw", "owner": "wb14123", "description": "Shadowsocks config for OpenWRT", "about": "This is just a reminder for me. So may not have so many details. Dependency: opkg install iptablesmodnatextra Shadowsocks libpolarssl is its dependency, install it from trunk and make symbol links. dn", "html_url": "https://github.com/wb14123/fuckgfw", "clone_url": "https://github.com/wb14123/fuckgfw.git", "stars": 4, "forks": 2, "language": "Shell", "created_at": "2014-07-20T11:21:53+00:00", "updated_at": "2015-08-08T13:31:51+00:00", "size": 141, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": ".github-workflows-openwrt-ci.yml", "full_name": "lance65/.github-workflows-openwrt-ci.yml", "owner": "lance65", "description": "# # This is free software, lisence use MIT. #  # Copyright (C) 2019 P3TERX <https://p3terx.com> # Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com> #  # <https://github.com/KFERMercer/OpenWrt-CI> #  name: OpenWrt-CI  on:   push:     branches:        - master   # schedule:   #   - cron: 0 20 * * *   # release:   #   types: [published]  jobs:   build:     runs-on: ubuntu-latest      steps:       - name: Checkout         uses: actions/checkout@master         with:           ref: master        - name: Initialization environment         env:           DEBIAN_FRONTEND: noninteractive         run: |           docker rmi `docker images -q`           echo \"Deleting files, please wait ...\"           sudo rm -rf \\             /usr/share/dotnet \\             /etc/mysql \\             /etc/php           sudo -E apt-get -y purge \\             azure-cli \\             ghc* \\             zulu* \\             hhvm \\             llvm* \\             firefox \\             google* \\             dotnet* \\             powershell \\             openjdk* \\             mysql* \\             php*           sudo -E apt-get update           sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler           sudo -E apt-get -y autoremove --purge           sudo -E apt-get clean        - name: Update feeds         run: |           ./scripts/feeds update -a           ./scripts/feeds install -a        - name: Costom configure file         run: |           rm -f ./.config*           touch ./.config            #           # ========================\u56fa\u4ef6\u5b9a\u5236\u90e8\u5206========================           #             #            # \u5982\u679c\u4e0d\u5bf9\u672c\u533a\u5757\u505a\u51fa\u4efb\u4f55\u7f16\u8f91, \u5219\u751f\u6210\u9ed8\u8ba4\u914d\u7f6e\u56fa\u4ef6.            #             # \u4ee5\u4e0b\u4e3a\u5b9a\u5236\u5316\u56fa\u4ef6\u9009\u9879\u548c\u8bf4\u660e:           #            #           # \u6709\u4e9b\u63d2\u4ef6/\u9009\u9879\u662f\u9ed8\u8ba4\u5f00\u542f\u7684, \u5982\u679c\u60f3\u8981\u5173\u95ed, \u8bf7\u53c2\u7167\u4ee5\u4e0b\u793a\u4f8b\u8fdb\u884c\u7f16\u5199:           #            #          =========================================           #         |  # \u53d6\u6d88\u7f16\u8bd1VMware\u955c\u50cf:                   |           #         |  cat >> .config <<EOF                   |           #         |  # CONFIG_VMDK_IMAGES is not set        |           #         |  EOF                                    |           #          =========================================           #            #            # \u4ee5\u4e0b\u662f\u4e00\u4e9b\u63d0\u524d\u51c6\u5907\u597d\u7684\u4e00\u4e9b\u63d2\u4ef6\u9009\u9879.           # \u76f4\u63a5\u53d6\u6d88\u6ce8\u91ca\u76f8\u5e94\u4ee3\u7801\u5757\u5373\u53ef\u5e94\u7528. \u4e0d\u8981\u53d6\u6d88\u6ce8\u91ca\u4ee3\u7801\u5757\u4e0a\u7684\u6c49\u5b57\u8bf4\u660e.           # \u5982\u679c\u4e0d\u9700\u8981\u4ee3\u7801\u5757\u91cc\u7684\u67d0\u4e00\u9879\u914d\u7f6e, \u53ea\u9700\u8981\u5220\u9664\u76f8\u5e94\u884c.           #           # \u5982\u679c\u9700\u8981\u5176\u4ed6\u63d2\u4ef6, \u8bf7\u6309\u7167\u793a\u4f8b\u81ea\u884c\u6dfb\u52a0.           # \u6ce8\u610f, \u53ea\u9700\u6dfb\u52a0\u4f9d\u8d56\u94fe\u9876\u7aef\u7684\u5305. \u5982\u679c\u4f60\u9700\u8981\u63d2\u4ef6 A, \u540c\u65f6 A \u4f9d\u8d56 B, \u5373\u53ea\u9700\u8981\u6dfb\u52a0 A.           #            # \u65e0\u8bba\u4f60\u60f3\u8981\u5bf9\u56fa\u4ef6\u8fdb\u884c\u600e\u6837\u7684\u5b9a\u5236, \u90fd\u9700\u8981\u4e14\u53ea\u9700\u8981\u4fee\u6539 EOF \u56de\u73af\u5185\u7684\u5185\u5bb9.           #             # \u7f16\u8bd1x64\u56fa\u4ef6:           # cat >> .config <<EOF           # CONFIG_TARGET_x86=y           # CONFIG_TARGET_x86_64=y           # CONFIG_TARGET_x86_64_Generic=y           # EOF            # \u56fa\u4ef6\u538b\u7f29:           # cat >> .config <<EOF           # CONFIG_TARGET_IMAGES_GZIP=y           # EOF            # \u7f16\u8bd1UEFI\u56fa\u4ef6:           # cat >> .config <<EOF           # CONFIG_EFI_IMAGES=y           # EOF            # IPv6\u652f\u6301:           # cat >> .config <<EOF           # CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y           # CONFIG_PACKAGE_ipv6helper=y           # EOF            # \u591a\u6587\u4ef6\u7cfb\u7edf\u652f\u6301:           # cat >> .config <<EOF           # CONFIG_PACKAGE_kmod-fs-nfs=y           # CONFIG_PACKAGE_kmod-fs-nfs-common=y           # CONFIG_PACKAGE_kmod-fs-nfs-v3=y           # CONFIG_PACKAGE_kmod-fs-nfs-v4=y           # CONFIG_PACKAGE_kmod-fs-ntfs=y           # CONFIG_PACKAGE_kmod-fs-squashfs=y           # EOF            # USB3.0\u652f\u6301:           # cat >> .config <<EOF           # CONFIG_PACKAGE_kmod-usb-ohci=y           # CONFIG_PACKAGE_kmod-usb-ohci-pci=y           # CONFIG_PACKAGE_kmod-usb2=y           # CONFIG_PACKAGE_kmod-usb2-pci=y           # CONFIG_PACKAGE_kmod-usb3=y           # EOF            # \u5e38\u7528LuCI\u63d2\u4ef6\u9009\u62e9:           # cat >> .config <<EOF           # CONFIG_PACKAGE_luci-app-adbyby-plus=y           # CONFIG_PACKAGE_luci-app-aria2=y           # CONFIG_PACKAGE_luci-app-baidupcs-web=y           # CONFIG_PACKAGE_luci-app-docker=y           # CONFIG_PACKAGE_luci-app-frpc=y           # CONFIG_PACKAGE_luci-app-hd-idle=y           # CONFIG_PACKAGE_luci-app-kodexplorer=y           # CONFIG_PACKAGE_luci-app-minidlna=y           # CONFIG_PACKAGE_luci-app-openvpn=y           # CONFIG_PACKAGE_luci-app-openvpn-server=y           # CONFIG_PACKAGE_luci-app-qbittorrent=y           # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y           # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y           # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y           # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y           # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y           # CONFIG_PACKAGE_luci-app-ttyd=y           # CONFIG_PACKAGE_luci-app-v2ray-server=y           # CONFIG_PACKAGE_luci-app-verysync=y           # CONFIG_PACKAGE_luci-app-webadmin=y           # CONFIG_PACKAGE_luci-app-wireguard=y           # CONFIG_PACKAGE_luci-app-wrtbwmon=y           # EOF            # LuCI\u4e3b\u9898:           # cat >> .config <<EOF           # CONFIG_PACKAGE_luci-theme-argon=y           # CONFIG_PACKAGE_luci-theme-netgear=y           # EOF            # \u5e38\u7528\u8f6f\u4ef6\u5305:           # cat >> .config <<EOF           # CONFIG_PACKAGE_curl=y           # CONFIG_PACKAGE_htop=y           # CONFIG_PACKAGE_nano=y           # CONFIG_PACKAGE_screen=y           # CONFIG_PACKAGE_tree=y           # CONFIG_PACKAGE_vim-fuller=y           # CONFIG_PACKAGE_wget=y           # EOF            # \u53d6\u6d88\u7f16\u8bd1VMware\u955c\u50cf\u4ee5\u53ca\u955c\u50cf\u586b\u5145 (\u4e0d\u8981\u5220\u9664\u88ab\u7f29\u8fdb\u7684\u6ce8\u91ca\u7b26\u53f7):           # cat >> .config <<EOF           # # CONFIG_TARGET_IMAGES_PAD is not set           # # CONFIG_VMDK_IMAGES is not set           # EOF            #            # ========================\u56fa\u4ef6\u5b9a\u5236\u90e8\u5206\u7ed3\u675f========================           #             sed -i 's/^[ \\t]*//g' ./.config           make defconfig        - name: Make download         run: |           make download -j8           find dl -size -1024c -exec ls -l {} \\;           find dl -size -1024c -exec rm -f {} \\;        - name: Compile firmware         run: |           echo -e \"$(nproc) thread build.\"           make -j$(nproc) V=s        - name: Assemble artifact         run: |           rm -rf ./artifact/           mkdir -p ./artifact/           find ./bin/targets/ -name \"*combined*img*\" | xargs -i mv -f {} ./artifact/           find ./bin/targets/ -name \"*sysupgrade*bin*\" | xargs -i mv -f {} ./artifact/        - name: Upload artifact         uses: actions/upload-artifact@master         with:           name: OpenWrt firmware           path: ./artifact/", "about": "", "html_url": "https://github.com/lance65/.github-workflows-openwrt-ci.yml", "clone_url": "https://github.com/lance65/.github-workflows-openwrt-ci.yml.git", "stars": 4, "forks": 0, "language": null, "created_at": "2019-12-03T10:56:08+00:00", "updated_at": "2025-04-12T11:06:55+00:00", "size": 0, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "shadowsocks-subscription-generator", "full_name": "HeIsNotMyChairman/shadowsocks-subscription-generator", "owner": "HeIsNotMyChairman", "description": "A simple script to generate multiple shadowsocks configs", "about": "shadowsockssubscriptiongenerator A simple script to generate subscription with multiple shadowsocks servers Usage: Open android.pyhttps://github.com/HeIsNotMyChairman/shadowsocksconfiggenerator/blob/m", "html_url": "https://github.com/HeIsNotMyChairman/shadowsocks-subscription-generator", "clone_url": "https://github.com/HeIsNotMyChairman/shadowsocks-subscription-generator.git", "stars": 3, "forks": 0, "language": "Python", "created_at": "2022-01-09T05:05:10+00:00", "updated_at": "2024-12-21T14:19:39+00:00", "size": 30, "topics": ["shadowsocks"], "search_keyword": "shadowsocks configs"}, {"name": "shadowsocks-ansible", "full_name": "majidettehadi/shadowsocks-ansible", "owner": "majidettehadi", "description": "Install and config shadowsocks client service with ansible", "about": "Shadowsocks ========= Install and config shadowsocks client service. Role Variables Settable variables for this role: shadowsockslocalport: Port which client accept connections. shadowsockslocaladdres", "html_url": "https://github.com/majidettehadi/shadowsocks-ansible", "clone_url": "https://github.com/majidettehadi/shadowsocks-ansible.git", "stars": 3, "forks": 0, "language": null, "created_at": "2019-02-23T07:17:23+00:00", "updated_at": "2021-02-12T04:08:45+00:00", "size": 4, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "clash-pro", "full_name": "abcdelf/clash-pro", "owner": "abcdelf", "description": "clash pro support subscribe provider clashx config, you can click https://portal.shadowsocks.nz/aff.php?aff=6346", "about": "Clash Pro Used for auto update provider clash config file. Current only support shadowsocks supplierhttps://portal.shadowsocks.nz/aff.php?aff=6346 You can click ClashX\u914d\u7f6e get the provider config subscr", "html_url": "https://github.com/abcdelf/clash-pro", "clone_url": "https://github.com/abcdelf/clash-pro.git", "stars": 3, "forks": 1, "language": "Python", "created_at": "2021-10-31T06:54:49+00:00", "updated_at": "2023-08-23T07:15:06+00:00", "size": 360, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "shadowsocks", "full_name": "why2222/shadowsocks", "owner": "why2222", "description": "install and config shadowsocks", "about": "shadowsocks install and config shadowsocks", "html_url": "https://github.com/why2222/shadowsocks", "clone_url": "https://github.com/why2222/shadowsocks.git", "stars": 2, "forks": 0, "language": "Shell", "created_at": "2019-04-04T11:59:17+00:00", "updated_at": "2019-04-20T04:14:08+00:00", "size": 4, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "shadowsocks-go-docker", "full_name": "muzea/shadowsocks-go-docker", "owner": "muzea", "description": "A tiny shadowsocks-go image use ENV to set config.", "about": "shadowsocksgodocker DockerHubhttps://hub.docker.com/r/woodenfish42/shadowsocksgodocker/ A tiny image use ENV to set config.", "html_url": "https://github.com/muzea/shadowsocks-go-docker", "clone_url": "https://github.com/muzea/shadowsocks-go-docker.git", "stars": 2, "forks": 2, "language": null, "created_at": "2018-02-17T15:28:23+00:00", "updated_at": "2019-07-04T08:09:06+00:00", "size": 1, "topics": ["shadowsocks-go", "docker"], "search_keyword": "shadowsocks configs"}, {"name": "Ishadowsocks", "full_name": "lei720/Ishadowsocks", "owner": "lei720", "description": "shadowsocks with ishadowsocks' config", "about": "Ishadowsocks shadowsocks with ishadowsocks' config How to use Download the files, and run Shadowsocks.exe How to work Every time the program start, it will update guiconfig.json from http://www.ishado", "html_url": "https://github.com/lei720/Ishadowsocks", "clone_url": "https://github.com/lei720/Ishadowsocks.git", "stars": 2, "forks": 1, "language": "Python", "created_at": "2015-09-26T17:43:53+00:00", "updated_at": "2017-04-09T13:28:44+00:00", "size": 3388, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "ss-json2cp", "full_name": "hsuanxyz/ss-json2cp", "owner": "hsuanxyz", "description": "Generate clipboard text for ShadowSocks mobile use by JSON config.", "about": "ssjson2cp Generate clipboard text for ShadowSocks mobile use by JSON config. Install and Use bash $ npm install ssjson2cp g $ ssjson2cp /Users/Downloads/export.json Output: ss://cmM0LWdi5jbEc200ZEQ...", "html_url": "https://github.com/hsuanxyz/ss-json2cp", "clone_url": "https://github.com/hsuanxyz/ss-json2cp.git", "stars": 2, "forks": 0, "language": "JavaScript", "created_at": "2019-01-25T07:56:21+00:00", "updated_at": "2019-04-10T14:58:56+00:00", "size": 3, "topics": [], "search_keyword": "shadowsocks configs"}, {"name": "ShadowsocksX", "full_name": "fengmk2/ShadowsocksX", "owner": "fengmk2", "description": "ShadowsocksX config backup", "about": "", "html_url": "https://github.com/fengmk2/ShadowsocksX", "clone_url": "https://github.com/fengmk2/ShadowsocksX.git", "stars": 1, "forks": 0, "language": null, "created_at": "2016-10-13T03:48:54+00:00", "updated_at": "2016-10-23T17:32:49+00:00", "size": 32, "topics": [], "search_keyword": "shadowsocks configs"}]}