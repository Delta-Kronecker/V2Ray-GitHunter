{"timestamp": 1761302040.1793978, "results": [{"name": "konfig", "full_name": "corneliusweig/konfig", "owner": "corneliusweig", "description": "konfig helps to merge, split or import kubeconfig files", "html_url": "https://github.com/corneliusweig/konfig", "clone_url": "https://github.com/corneliusweig/konfig.git", "stars": 384, "forks": 21, "language": "Shell", "created_at": "2019-03-30T21:38:13+00:00", "updated_at": "2025-10-14T11:27:56+00:00", "size": 64, "topics": ["kubectl-plugins", "kubectl-plugin", "config", "kubeconfig", "merge", "kubernetes", "kubectl"], "search_keyword": "config merge"}, {"name": "hiyapyco", "full_name": "zerwes/hiyapyco", "owner": "zerwes", "description": "HiYaPyCo - A Hierarchical Yaml Python Config", "html_url": "https://github.com/zerwes/hiyapyco", "clone_url": "https://github.com/zerwes/hiyapyco.git", "stars": 115, "forks": 25, "language": "Python", "created_at": "2014-11-11T10:53:40+00:00", "updated_at": "2025-10-22T22:40:43+00:00", "size": 344, "topics": ["python", "yaml", "configuration", "config", "merge", "python3", "open-source"], "search_keyword": "config merge"}, {"name": "terraform-provider-utils", "full_name": "cloudposse/terraform-provider-utils", "owner": "cloudposse", "description": "The Cloud Posse Terraform Provider for various utilities (e.g. deep merging, stack configuration management)", "html_url": "https://github.com/cloudposse/terraform-provider-utils", "clone_url": "https://github.com/cloudposse/terraform-provider-utils.git", "stars": 109, "forks": 20, "language": "Go", "created_at": "2021-01-25T15:17:00+00:00", "updated_at": "2025-10-08T21:46:40+00:00", "size": 1366, "topics": ["terraform", "terraform-providers", "provider", "utilities", "utils", "deep-merge", "stack", "config", "configuration", "configuration-management", "spacelift"], "search_keyword": "config merge"}, {"name": "conflate", "full_name": "miracl/conflate", "owner": "miracl", "description": "Library providing routines to merge and validate JSON, YAML and/or TOML files", "html_url": "https://github.com/miracl/conflate", "clone_url": "https://github.com/miracl/conflate.git", "stars": 49, "forks": 8, "language": "Go", "created_at": "2018-01-10T10:51:02+00:00", "updated_at": "2025-08-19T14:02:23+00:00", "size": 5119, "topics": ["configuration", "config", "configuration-management", "golang", "golang-library", "json", "json-schema", "yaml", "toml", "merge", "structs"], "search_keyword": "config merge"}, {"name": "OVPN-Config-Manipulator", "full_name": "labbots/OVPN-Config-Manipulator", "owner": "labbots", "description": "Bash script to merge/split OVPN files. Open VPN config file (.ovpn) contains several certificates and key files which are required for the setup. This script allows you to merge those certificates and keys into single config file. The script can also be used to split a single self-contained ovpn config file to individual config and cert files.", "html_url": "https://github.com/labbots/OVPN-Config-Manipulator", "clone_url": "https://github.com/labbots/OVPN-Config-Manipulator.git", "stars": 25, "forks": 3, "language": "Shell", "created_at": "2020-04-24T11:53:21+00:00", "updated_at": "2025-04-21T14:00:39+00:00", "size": 19, "topics": ["bash", "bash-script", "shell", "ovpn", "openvpn", "openvpn-configuration"], "search_keyword": "config merge"}, {"name": "kubectl-config-merge", "full_name": "kairen/kubectl-config-merge", "owner": "kairen", "description": "A kubectl plugin for merging multiple kubeconfig files. A cli-runtime example.", "html_url": "https://github.com/kairen/kubectl-config-merge", "clone_url": "https://github.com/kairen/kubectl-config-merge.git", "stars": 24, "forks": 1, "language": "Go", "created_at": "2019-02-14T15:12:36+00:00", "updated_at": "2025-08-25T15:49:08+00:00", "size": 5406, "topics": ["kubectl-plugins", "kubernetes", "kubectl"], "search_keyword": "config merge"}, {"name": "xconf", "full_name": "sandwich-go/xconf", "owner": "sandwich-go", "description": "Dead simple yet complete and powerful configuration manager for Go.", "html_url": "https://github.com/sandwich-go/xconf", "clone_url": "https://github.com/sandwich-go/xconf.git", "stars": 24, "forks": 2, "language": "Go", "created_at": "2022-01-04T05:44:03+00:00", "updated_at": "2025-07-08T07:49:33+00:00", "size": 532, "topics": ["go", "config", "flagset", "environment-variables", "yaml", "toml", "json", "etcdv3", "hot-reload", "goconf", "cmdline", "merge", "flags"], "search_keyword": "config merge"}, {"name": "mergeKubeConfig", "full_name": "sunny0826/mergeKubeConfig", "owner": "sunny0826", "description": "\u81ea\u52a8\u5408\u5e76kubeconfig\u6587\u4ef6\uff0c\u751f\u6210\u53ef\u5728\u7ec8\u7aef\u8bbf\u95ee\u591a\u96c6\u7fa4\u914d\u7f6e\u6587\u4ef6", "html_url": "https://github.com/sunny0826/mergeKubeConfig", "clone_url": "https://github.com/sunny0826/mergeKubeConfig.git", "stars": 23, "forks": 11, "language": "Python", "created_at": "2019-03-15T08:39:44+00:00", "updated_at": "2023-07-27T03:40:35+00:00", "size": 36, "topics": [], "search_keyword": "config merge"}, {"name": "serverless-merge-config", "full_name": "CruGlobal/serverless-merge-config", "owner": "CruGlobal", "description": "Serverless plugin that implements configuration merge after variable expansion has occurred.", "html_url": "https://github.com/CruGlobal/serverless-merge-config", "clone_url": "https://github.com/CruGlobal/serverless-merge-config.git", "stars": 23, "forks": 7, "language": "JavaScript", "created_at": "2018-03-11T17:53:21+00:00", "updated_at": "2023-05-29T15:01:37+00:00", "size": 7, "topics": [], "search_keyword": "config merge"}, {"name": "Git-quick-reference-for-beginners", "full_name": "jojo1317/Git-quick-reference-for-beginners", "owner": "jojo1317", "description": "There are many good resources for learning Git. (Here's an excellent online book, and this is my videos series introducing Git and GitHub.) But once you've learned the basics, it can be hard to remember which commands to use to execute the most common tasks.  I went searching for a Git reference guide that would be useful for beginners like myself, but didn't find anything ideal:  Git - the simple guide is useful as a high-level overview of the basic commands, but doesn't provide enough details. Git Cheatsheet uses a nice interactive approach to summarize a ton of git commands on one screen, but it doesn't give you any sense of workflow. Git Reference is close to what I was looking for, and links each entry to the relevant section of Pro Git (awesome!), but is too long for a quick reference. So, I decided to make my own reference guide!  The guide below is organized by task, with an emphasis on basic tasks and common command line arguments. It begins with the workflow for cloning, updating, and syncing with a remote repo because that's a common way to get started with Git and GitHub.  Note that this is only a reference guide, and will not teach you Git. It does not explain the difference between staged and committed, what to do with a .gitignore file, or when to create a branch. But if you are already familiar with those concepts, this guide will hopefully refresh your memory and help you to discover other commands you might need.  Please enjoy, and let me know your thoughts or questions in the comments!  Cloning a remote repo (that you created or forked on GitHub)  git clone < your-repo-URL >: copies your remote repo to your local machine (in a subdirectory with the repo's name), and automatically creates an \"origin\" handle git remote add upstream < forked-repo-URL >: adds an \"upstream\" handle for the repo you forked git remote -v: shows the handles for your remotes git remote show < handlename >: inspect a remote in detail Tracking, committing, and pushing your changes  git add < name >: if untracked, start tracking a file or directory; if tracked and modified, stage it for committing git reset HEAD < name >: unstage a changed file git commit -m \"message\": commits everything that has been staged with a message -a -m \"message\": automatically stages any modified files, then commits --amend -m \"new message\": fixes the message from the last commit git push origin master: pushes your commits to the master branch of the origin Syncing your local repo with the upstream repo  git fetch upstream: fetch the upstream and store its master branch in \"upstream/master\" git merge upstream/master: merge that branch into the working branch Viewing the status of your files  git status: check which files have been modified and/or staged since the last commit git diff: shows the diff for files that are modified but not staged --staged: shows the diff for files that are staged but not committed Viewing the commit history  git log: shows the detailed commit history -1: only shows the last 1 commit -p: shows the line diff for each commit -p --word-diff: shows the word diff for each commit --stat: shows stats instead of diff details --name-status: shows a simpler version of stat --oneline: just shows commit comments gitk: open a visual commit browser Managing branches  git branch: shows a list of local branches < branchname >: create a new branch with that name -d < branchname >: delete a branch -v: show the last commit on each local branch -a: show local and remote branches -va: show the last commit on each local and remote branch --merged: list which branches are already merged into the working branch (safe to delete) --no-merged: list which branches are not merged into the working branch git checkout < branchname >: switch the HEAD pointer to a different branch -b < branchname >: create a new branch and switch to it Removing, deleting, and reverting files  git rm < name >: deletes that file from the disk, then stages its deletion --cached < name >: stops tracking a file, then stages its deletion (but does not delete it from the disk) git mv < oldname > < newname >: renames the file on disk, then stages the deletion of the old name and addition of the new name git checkout -- < name >: revert a modified file on disk back to the last committed version Other basic commands  git init: initialize Git in an existing directory git config --list: shows your Git configuration touch .gitignore: create an empty .gitignore file", "html_url": "https://github.com/jojo1317/Git-quick-reference-for-beginners", "clone_url": "https://github.com/jojo1317/Git-quick-reference-for-beginners.git", "stars": 23, "forks": 30, "language": null, "created_at": "2014-08-25T02:36:39+00:00", "updated_at": "2025-07-11T11:00:04+00:00", "size": 128, "topics": [], "search_keyword": "config merge"}, {"name": "easy-module-attribute-getter", "full_name": "KevinMusgrave/easy-module-attribute-getter", "owner": "KevinMusgrave", "description": "Fetch and initialize objects in one line, without any if-statements or dictionaries. Merge and override complex config options at the command line.", "html_url": "https://github.com/KevinMusgrave/easy-module-attribute-getter", "clone_url": "https://github.com/KevinMusgrave/easy-module-attribute-getter.git", "stars": 20, "forks": 2, "language": "Python", "created_at": "2019-10-31T14:40:49+00:00", "updated_at": "2025-10-06T09:29:20+00:00", "size": 138, "topics": ["yaml", "python", "module", "attributes", "clean-code"], "search_keyword": "config merge"}, {"name": "asg", "full_name": "ambiversive/asg", "owner": "ambiversive", "description": "This is a content management system that merges concepts from multiplayer games, operating systems, wikis, link aggregators, feed readers, and more! Features:  * OOP/MySQL/PHP/HTML/CSS/JS/Jquery/scrollTo+LocalScroll/Ace editor/Notifier.js * Documents organized in tree hierarchy, each document can act as directory * Every edit of a document saves a new revision with the old document * Chat integrated (chat notifies of cms events, uses long polling) * Aspect oriented (aspects can be toggled with commands or in sets- a user's aspect can be refreshed from the server by setting an aspect_preference variable to 2 (0 means off, 1 means on, 2 means needs refresh) * Command line (defaults to chat input, commands begin with forward slash) * Bots (Bot commands can be added as easily as adding a document in the appropriate place, bots can execute code. Bots respond to users they are focused on, when active.) * User-selectable stylesheets + individual css rules (styles are editable within the CMS, individual style rules are applied after loading style, added with /set body background black) * Easy to add new commands (/addcom) (commands are stored in CMS as javascript and loaded at runtime) * All aspects and commands are listed with /help * Aspects are remembered between sessions (ie: looks the way you left it) * All aspects, documents, commands, and users have access levels * Uses Ace editor for editing documents  * DB info stored in database/config.php - run the .sql then login with admin/admin * Integrated link aggregator with full cache (fetches link with wget) * Integrated RSS feed parser and db of over 200 feeds * One aspect is called the 'metabrowser' which is an iframe that loads a URL on command (usage: /bload http://reddit.com or /meta) .. the url is also remembered between sessions. * There is an interesting JS function called 'simcom' which simulates a user typing into the command line- works for both commands and chat messages. Usage: asgConfig.simcom('chat message or command!')   ", "html_url": "https://github.com/ambiversive/asg", "clone_url": "https://github.com/ambiversive/asg.git", "stars": 20, "forks": 4, "language": "PHP", "created_at": "2011-10-17T03:29:46+00:00", "updated_at": "2025-06-03T10:38:11+00:00", "size": 6118, "topics": [], "search_keyword": "config merge"}, {"name": "env-config", "full_name": "sitture/env-config", "owner": "sitture", "description": "A simple utility to manage environment configs in Java-based projects by merging .properties files and environment variables overrides.", "html_url": "https://github.com/sitture/env-config", "clone_url": "https://github.com/sitture/env-config.git", "stars": 19, "forks": 16, "language": "Java", "created_at": "2018-10-02T12:29:55+00:00", "updated_at": "2025-10-21T09:27:46+00:00", "size": 502, "topics": ["environment-variables", "config", "configuration", "env-loader", "properties", "environment", "continuous-integration", "continuous-deployment", "java", "bdd", "overridden", "environment-manager", "environment-vars", "sitture", "keepass", "secrets", "secrets-manager", "hacktoberfest", "configuration-files", "configuration-management"], "search_keyword": "config merge"}, {"name": "node-merge-config", "full_name": "Telefonica/node-merge-config", "owner": "Telefonica", "description": "Merge multiple configuration sources: JSON and YAML files, directories, environment properties and command-line arguments.", "html_url": "https://github.com/Telefonica/node-merge-config", "clone_url": "https://github.com/Telefonica/node-merge-config.git", "stars": 19, "forks": 3, "language": "JavaScript", "created_at": "2015-06-24T08:30:07+00:00", "updated_at": "2023-08-22T22:20:47+00:00", "size": 20, "topics": [], "search_keyword": "config merge"}, {"name": "config-webpack-plugin", "full_name": "rmariuzzo/config-webpack-plugin", "owner": "rmariuzzo", "description": "\ud83d\udcab Merge one or more configuration files together with environment variables too.", "html_url": "https://github.com/rmariuzzo/config-webpack-plugin", "clone_url": "https://github.com/rmariuzzo/config-webpack-plugin.git", "stars": 18, "forks": 6, "language": "JavaScript", "created_at": "2016-08-06T05:50:26+00:00", "updated_at": "2021-06-23T22:14:14+00:00", "size": 2921, "topics": ["webpack", "javascript", "webpack-plugin", "configuration-by-environment", "configuration"], "search_keyword": "config merge"}, {"name": "CH-JaDi-Rajput1", "full_name": "Ch-Jad/CH-JaDi-Rajput1", "owner": "Ch-Jad", "description": "# Cmder  [![Join the chat at https://gitter.im/cmderdev/cmder](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/cmderdev/cmder?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![Build Status](https://ci.appveyor.com/api/projects/status/github/cmderdev/cmder?branch=master&svg=true)](https://ci.appveyor.com/project/MartiUK/cmder)  Cmder is a **software package** created out of pure frustration over absence of usable console emulator on Windows. It is based on [ConEmu](https://conemu.github.io/) with *major* config overhaul, comes with a Monokai color scheme, amazing [clink](https://chrisant996.github.io/clink/) (further enhanced by [clink-completions](https://github.com/vladimir-kotikov/clink-completions)) and a custom prompt layout.  ![Cmder Screenshot](http://i.imgur.com/g1nNf0I.png)  ## Why use it  The main advantage of Cmder is portability. It is designed to be totally self-contained with no external dependencies, which makes it great for **USB Sticks** or **cloud storage**. So you can carry your console, aliases and binaries (like wget, curl and git) with you anywhere.  The Cmder's user interface is also designed to be more eye pleasing, and you can compare the main differences between Cmder and ConEmu [here](https://conemu.github.io/en/cmder.html).  ## Installation ### Single User Portable Config  1. Download the [latest release](https://github.com/cmderdev/cmder/releases/) 2. Extract the archive. *Note: This path should not be `C:\\Program Files` or anywhere else that would require Administrator access for modifying configuration files* 3. (optional) Place your own executable files into the `%cmder_root%\\bin` folder to be injected into your PATH. 4. Run `Cmder.exe`  ### Shared Cmder install with Non-Portable Individual User Config 1. Download the [latest release](https://github.com/cmderdev/cmder/releases/) 2. Extract the archive to a shared location. 3. (optional) Place your own executable files and custom app folders into the `%cmder_root%\\bin`. See: [bin/README.md](./bin/Readme.md)    - This folder to be injected into your PATH by default.    - See `/max_depth [1-5]` in 'Command Line Arguments for `init.bat`' table to add subdirectories recursively. 4. (optional) Place your own custom app folders into the `%cmder_root%\\opt`. See: [opt/README.md](./opt/Readme.md)    - This folder will NOT be injected into your PATH so you have total control of what gets added. 5. Run `Cmder.exe` with `/C` command line argument. Example: `cmder.exe /C %userprofile%\\cmder_config`    * This will create the following directory structure if it is missing.       ```      c:\\users\\[CH JaDi Rajput]\\cmder_config      \u251c\u2500\u2500\u2500bin      \u251c\u2500\u2500\u2500config      \u2502   \u2514\u2500\u2500\u2500profile.d      \u2514\u2500\u2500\u2500opt      ```    - (optional) Place your own executable files and custom app folders into `%userprofile%\\cmder_config\\bin`.     - This folder to be injected into your PATH by default.     - See `/max_depth [1-5]` in 'Command Line Arguments for `init.bat`' table to add subdirectories recursively.   - (optional) Place your own custom app folders into the `%user_profile%\\cmder_config\\opt`.     - This folder will NOT be injected into your PATH so you have total control of what gets added.   * Both the shared install and the individual user config locations can contain a full set of init and profile.d scripts enabling shared config with user overrides.  See below.  ## Cmder.exe Command Line Arguments   | Argument                  | Description                                                                              | | -------------------       | -----------------------------------------------------------------------                  | | `/C [user_root_path]`     | Individual user Cmder root folder.  Example: `%userprofile%\\cmder_config`                | | `/M`                      | Use `conemu-%computername%.xml` for ConEmu settings storage instead of `user_conemu.xml` | | `/REGISTER [ALL, USER]`   | Register a Windows Shell Menu shortcut.                                                  | | `/UNREGISTER [ALL, USER]` | Un-register a Windows Shell Menu shortcut.                                               | | `/SINGLE`                 | Start Cmder in single mode.                                                              | | `/START [start_path]`     | Folder path to start in.                                                                 | | `/TASK [task_name]`       | Task to start after launch.                                                              | | `/X [ConEmu extras pars]` | Forwards parameters to ConEmu                                                             |  ## Context Menu Integration  So you've experimented with Cmder a little and want to give it a shot in a more permanent home;  ### Shortcut to open Cmder in a chosen folder  1. Open a terminal as an Administrator 2. Navigate to the directory you have placed Cmder 3. Execute `.\\cmder.exe /REGISTER ALL`    _If you get a message \"Access Denied\" ensure you are executing the command in an **Administrator** prompt._  In a file explorer window right click in or on a directory to see \"Cmder Here\" in the context menu.  ## Keyboard shortcuts  ### Tab manipulation  * <kbd>Ctrl</kbd> + <kbd>T</kbd> : New tab dialog (maybe you want to open cmd as admin?) * <kbd>Ctrl</kbd> + <kbd>W</kbd> : Close tab * <kbd>Ctrl</kbd> + <kbd>D</kbd> : Close tab (if pressed on empty command) * <kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>#Number</kbd> : Fast new tab: <kbd>1</kbd> - CMD, <kbd>2</kbd> - PowerShell * <kbd>Ctrl</kbd> + <kbd>Tab</kbd> : Switch to next tab * <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>Tab</kbd> : Switch to previous tab * <kbd>Ctrl</kbd> + <kbd>#Number</kbd> : Switch to tab #Number * <kbd>Alt</kbd> + <kbd>Enter</kbd>: Fullscreen  ### Shell  * <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>U</kbd> : Traverse up in directory structure (lovely feature!) * <kbd>End</kbd>, <kbd>Home</kbd>, <kbd>Ctrl</kbd> : Traversing text with as usual on Windows * <kbd>Ctrl</kbd> + <kbd>R</kbd> : History search * <kbd>Shift</kbd> + Mouse : Select and copy text from buffer  _(Some shortcuts are not yet documented, though they exist - please document them here)_  ## Features  ### Access to multiple shells in one window using tabs You can open multiple tabs each containing one of the following shells:  | Task                | Shell            | Description                                                                                                  | | ----                | -----            | -----------                                                                                                  | | Cmder               | `cmd.exe`        | Windows `cmd.exe` shell enhanced with Git, Git aware prompt, Clink (GNU Readline), and Aliases.              | | Cmder as Admin      | `cmd.exe`        | Administrative Windows `cmd.exe` Cmder shell.                                                                | | PowerShell          | `powershell.exe` | Windows PowerShell enhanced with Git and Git aware prompt .                                                  | | PowerShell as Admin | `powershell.exe` | Administrative Windows `powershell.exe` Cmder shell.                                                         | | Bash                | `bash.exe`       | Unix/Linux like bash shell running on Windows.                                                               | | Bash as Admin       | `bash.exe`       | Administrative Unix/Linux like bash shell running on Windows.                                                | | Mintty              | `bash.exe`       | Unix/Linux like bash shell running on Windows. See below for Mintty configuration differences                | | Mintty as Admin     | `bash.exe`       | Administrative Unix/Linux like bash shell running on Windows. See below for Mintty configuration differences |  Cmder, PowerShell, and Bash tabs all run on top of the Windows Console API and work as you might expect in Cmder with access to use ConEmu's color schemes, key bindings and other settings defined in the ConEmu Settings dialog.  \u26a0 *NOTE:* Only the full edition of Cmder comes with a pre-installed bash, using a vendored [git-for-windows](https://gitforwindows.org/) installation. The pre-configured Bash tabs may not work on Cmder mini edition without additional configuration.  You may however, choose to use an external installation of bash, such as Microsoft's [Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10) (called WSL) or the [Cygwin](https://cygwin.com/) project which provides POSIX support on windows.  \u26a0 *NOTE:* Mintty tabs use a program called 'mintty' as the terminal emulator that is not based on the Windows Console API, rather it's rendered graphically by ConEmu. Mintty differs from the other tabs in that it supports xterm/xterm-256color TERM types, and does not work with ConEmu settings like color schemes and key bindings.  As such, some differences in functionality are to be expected, such as Cmder not being able to apply a system-wide configuration to it.  As a result mintty specific config is done via the `[%USERPROFILE%|$HOME]/.minttyrc` file.  You may read more about Mintty and its config file [here](https://github.com/mintty/mintty).  An example of setting Cmder portable terminal colors for mintty:  From a bash/mintty shell:  ``` cd $CMDER_ROOT/vendor git clone https://github.com/karlin/mintty-colors-solarized.git cd mintty-colors-solarized/ echo source \\$CMDER_ROOT/vendor/mintty-colors-solarized/mintty-solarized-dark.sh>>$CMDER_ROOT/config/user_profile.sh ```  You may find some Monokai color schemes for mintty to match Cmder [here](https://github.com/oumu/mintty-color-schemes/blob/master/base16-monokai-mod.minttyrc).  ### Changing Cmder Default `cmd.exe` Prompt Config File  The default Cmder shell `cmd::Cmder` prompt is customized using `Clink` and is configured by editing a config file that exists in one of two locations:  - Single User Portable Config `%CMDER_ROOT%\\config\\cmder_prompt_config.lua` - Shared Cmder install with Non-Portable Individual User Config `%CMDER_USER_CONFIG%\\cmder_prompt_config.lua`  If your Cmder setup does not have this file create it from `%CMDER_ROOT%\\vendor\\cmder_prompt_config.lua.default`  Customizations include:  - Colors. - Single/Multi-line. - Full path/Folder only. - `[user]@[host]` to the beginning of the prompt. - `~` for home directory. - `\u03bb` symbol  Documentation is in the file for each setting.  ### Changing Cmder Default `cmd.exe` Shell Startup Behaviour Using Task Arguments  1. Press <kbd>Win</kbd> + <kbd>Alt</kbd> + <kbd>T</kbd> 1. Click either:   * `1. {cmd::Cmder as Admin}`   * `2. {cmd::Cmder}` 1. Add command line arguments where specified below:    *Note: Pay attention to the quotes!*    ```   cmd /s /k \"\"%ConEmuDir%\\..\\init.bat\" [ADD ARGS HERE]\"   ```  ##### Command Line Arguments for `init.bat`  | Argument                        | Description                                                                                                                                        | Default                                | | -----------------------------   | ----------------------------------------------------------------------------------------------                                                     | -------------------------------------  | | `/c [user cmder root]`          | Enables user bin and config folders for 'Cmder as admin' sessions due to non-shared environment.                                                   | not set                                | | `/d`                            | Enables debug output.                                                                                                                              | not set                                | | `/f`                            | Enables Cmder Fast Init Mode. This disables some features, see pull request [#1492](https://github.com/cmderdev/cmder/pull/1942) for more details. | not set                                | | `/t`                            | Enables Cmder Timed Init Mode. This displays the time taken run init scripts                                                                       | not set                                | | `/git_install_root [file path]` | User specified Git installation root path.                                                                                                         | `%CMDER_ROOT%\\vendor\\Git-for-Windows`  | | `/home [home folder]`           | User specified folder path to set `%HOME%` environment variable.                                                                                   | `%userprofile%`                        | | `/max_depth [1-5]`              | Define max recurse depth when adding to the path for `%cmder_root%\\bin` and `%cmder_user_bin%`                                                     | 1                                      | | `/nix_tools [0-2]`              | Define how `*nix` tools are added to the path.  Prefer Windows Tools: 1, Prefer *nix Tools: 2, No `/usr/bin` in `%PATH%`: 0                        | 1                                      | | `/svn_ssh [path to ssh.exe]`    | Define `%SVN_SSH%` so we can use git svn with ssh svn repositories.                                                                                | `%GIT_INSTALL_ROOT%\\bin\\ssh.exe`       | | `/user_aliases [file path]`     | File path pointing to user aliases.                                                                                                                | `%CMDER_ROOT%\\config\\user_aliases.cmd` | | `/v`                            | Enables verbose output.                                                                                                                            | not set                                | | (custom arguments)              | User defined arguments processed by `cexec`. Type `cexec /?` for more usage.                                                                      | not set                                |  ### Cmder Shell User Config Single user portable configuration is possible using the cmder specific shell config files.  Edit the below files to add your own configuration:  | Shell         | Cmder Portable User Config                | | ------------- | ----------------------------------------- | | Cmder         | `%CMDER_ROOT%\\config\\user_profile.cmd`    | | PowerShell    | `$ENV:CMDER_ROOT\\config\\user_profile.ps1` | | Bash/Mintty   | `$CMDER_ROOT/config/user_profile.sh`      |  Note: Bash and Mintty sessions will also source the `$HOME/.bashrc` file if it exists after it sources `$CMDER_ROOT/config/user_profile.sh`.  You can write `*.cmd|*.bat`, `*.ps1`, and `*.sh` scripts and just drop them in the `%CMDER_ROOT%\\config\\profile.d` folder to add startup config to Cmder.  | Shell         | Cmder `Profile.d` Scripts                          | | ------------- | -------------------------------------------------- | | Cmder         | `%CMDER_ROOT%\\config\\profile.d\\*.bat and *.cmd`    | | PowerShell    | `$ENV:CMDER_ROOT\\config\\profile.d\\*.ps1`           | | Bash/Mintty   | `$CMDER_ROOT/config/profile.d/*.sh`                |  #### Git Status Opt-Out   To disable Cmder prompt git status globally add the following to `~/.gitconfig` or locally for a single repo `[repo]/.git/config` and start a new session.   *Note: This configuration is not portable*   ```  [cmder]    status = false      # Opt out of Git status for 'ALL' Cmder supported shells.    cmdstatus = false   # Opt out of Git status for 'Cmd.exe' shells.    psstatus = false    # Opt out of Git status for 'Powershell.exe and 'Pwsh.exe' shells.    shstatus = false    # Opt out of Git status for 'bash.exe' shells.  ```  ### Aliases #### Cmder(`Cmd.exe`) Aliases You can define simple aliases for `cmd.exe` sessions with a command like `alias name=command`.  Cmd.exe aliases support optional parameters through the `$1-9` or the `$*` special characters so the alias `vi=vim.exe $*` typed as `vi [filename]` will open `[filename]` in `vim.exe`.  Cmd.exe aliases can also be more complex. See: [DOSKEY.EXE documentation](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/doskey) for additional details on complex aliases/macros for `cmd.exe`  Aliases defined using the `alias.bat` command will automatically be saved in the `%CMDER_ROOT%\\config\\user_aliases.cmd` file  To make an alias and/or any other profile settings permanent add it to one of the following:  Note: These are loaded in this order by `$CMDER_ROOT/vendor/init.bat`.  Anything stored in `%CMDER_ROOT%` will be a portable setting and will follow cmder to another machine.  * `%CMDER_ROOT%\\config\\profile.d\\*.cmd` and `\\*.bat` * `%CMDER_ROOT%\\config\\user_aliases.cmd` * `%CMDER_ROOT%\\config\\user_profile.cmd`  #### Bash.exe|Mintty.exe Aliases Bash shells support simple and complex aliases with optional parameters natively so they work a little different.  Typing `alias name=command` will create an alias only for the current running session.  To make an alias and/or any other profile settings permanent add it to one of the following:  Note: These are loaded in this order by `$CMDER_ROOT/vendor/git-for-windows/etc/profile.d/cmder.sh`.  Anything stored in `$CMDER_ROOT` will be a portable setting and will follow cmder to another machine.  * `$CMDER_ROOT/config/profile.d/*.sh` * `$CMDER_ROOT/config/user_profile.sh` * `$HOME/.bashrc`  If you add bash aliases to `$CMDER_ROOT/config/user_profile.sh` they will be portable and follow your Cmder folder if you copy it to another machine.  `$HOME/.bashrc` defined aliases are not portable.  #### PowerShell.exe Aliases PowerShell has native simple alias support, for example `[new-alias | set-alias] alias command`, so complex aliases with optional parameters are not supported in PowerShell sessions.  Type `get-help [new-alias|set-alias] -full` for help on PowerShell aliases.  To make an alias and/or any other profile settings permanent add it to one of the following:  Note: These are loaded in this order by `$ENV:CMDER_ROOT\\vendor\\user_profile.ps1`.  Anything stored in `$ENV:CMDER_ROOT` will be a portable setting and will follow cmder to another machine.  * `$ENV:CMDER_ROOT\\config\\profile.d\\*.ps1` * `$ENV:CMDER_ROOT\\config\\user_profile.ps1`  ### SSH Agent  To start the vendored SSH agent simply call `start-ssh-agent`, which is in the `vendor/git-for-windows/cmd` folder.  If you want to run SSH agent on startup, include the line `@call \"%GIT_INSTALL_ROOT%/cmd/start-ssh-agent.cmd\"` in `%CMDER_ROOT%/config/user_profile.cmd` (usually just uncomment it).  ### Vendored Git  Cmder is by default shipped with a vendored Git installation.  On each instance of launching Cmder, an attempt is made to locate any other user provided Git binaries. Upon finding a `git.exe` binary, Cmder further compares its version against the vendored one _by executing_ it. The vendored `git.exe` binary is _only_ used when it is more recent than the user-installed one.  You may use your favorite version of Git by including its path in the `%PATH%` environment variable.  Moreover, the **Mini** edition of Cmder (found on the [downloads page](https://github.com/cmderdev/cmder/releases)) excludes any vendored Git binaries.  ### Using external Cygwin/Babun, MSys2, WSL, or Git for Windows SDK with Cmder.  You may run bash (the default shell used on Linux, macOS and GNU/Hurd) externally on Cmder, using the following instructions:  1. Setup a new task by pressing <kbd>Win</kbd> +<kbd>Alt</kbd> + <kbd>T</kbd>. 1. Click the `+` button to add a task. 1. Name the new task in the top text box. 1. Provide task parameters, this is optional. 1. Add `cmd /c \"[path_to_external_env]\\bin\\bash --login -i\" -new_console` to the `Commands` text box.  **Recommended Optional Steps:**  Copy the `vendor/cmder_exinit` file to the Cygwin/Babun, MSys2, or Git for Windows SDK environments `/etc/profile.d/` folder to use portable settings in the `$CMDER_ROOT/config` folder.  Note: MinGW could work if the init scripts include `profile.d` but this has not been tested.  The destination file extension depends on the shell you use in that environment.  For example:  * bash - Copy to `/etc/profile.d/cmder_exinit.sh` * zsh  - Copy to `/etc/profile.d/cmder_exinit.zsh`  Uncomment and edit the below line in the script to use Cmder config even when launched from outside Cmder.  ``` # CMDER_ROOT=${USERPROFILE}/cmder  # This is not required if launched from Cmder. ```  ### Customizing user sessions using `init.bat` custom arguments.  You can pass custom arguments to `init.bat` and use `cexec.cmd` in your `user_profile.cmd` to evaluate these arguments then execute commands based on a particular flag being detected or not.  `init.bat` creates two shortcuts for using `cexec.cmd` in your profile scripts.  #### `%ccall%` - Evaluates flags, runs commands if found,  and returns to the calling script and continues.  ``` ccall=call C:\\Users\\user\\cmderdev\\vendor\\bin\\cexec.cmd ```  Example: `%ccall% /startnotepad start notepad.exe`  #### `%cexec%` - Evaluates flags, runs commands if found, and does not return to the calling script.  ``` cexec=C:\\Users\\user\\cmderdev\\vendor\\bin\\cexec.cmd ```  Example: `%cexec% /startnotepad start notepad.exe`  It is useful when you have multiple tasks to execute `cmder` and need it to initialize the session differently depending on the task chosen.  To conditionally start `notepad.exe` when you start a specific `cmder` task:  * Press <kbd>win</kbd>+<kbd>alt</kbd>+<kbd>t</kbd> * Click `+` to add a new task. * Add the below to the `Commands` block:    ```batch    cmd.exe /k \"\"%ConEmuDir%\\..\\init.bat\" /startnotepad\"    ```  * Add the below to your `%cmder_root%\\config\\user_profile.cmd`    ```batch    %ccall% \"/startNotepad\" \"start\" \"notepad.exe\"`    ```  To see detailed usage of `cexec`, type `cexec /?` in cmder.  ### Integrating Cmder with [Hyper](https://github.com/zeit/hyper), [Microsoft VS Code](https://code.visualstudio.com/), and your favorite IDEs  Cmder by default comes with a vendored ConEmu installation as the underlying terminal emulator, as stated [here](https://conemu.github.io/en/cmder.html).  However, Cmder can in fact run in a variety of other terminal emulators, and even integrated IDEs. Assuming you have the latest version of Cmder, follow the following instructions to get Cmder working with your own terminal emulator.  For instructions on how to integrate Cmder with your IDE, please read our [Wiki section](https://github.com/cmderdev/cmder/wiki#cmder-integration).  ## Upgrading  The process of upgrading Cmder depends on the version/build you are currently running.  If you have a `[cmder_root]/config/user[-|_]conemu.xml`, you are running a newer version of Cmder, follow the below process:  1. Exit all Cmder sessions and relaunch `[cmder_root]/cmder.exe`, this backs up your existing `[cmder_root]/vendor/conemu-maximus5/conemu.xml` to `[cmder_root]/config/user[-|_]conemu.xml`.     * The `[cmder_root]/config/user[-|_]conemu.xml` contains any custom settings you have made using the 'Setup Tasks' settings dialog.  2. Exit all Cmder sessions and backup any files you have manually edited under `[cmder_root]/vendor`.     * Editing files under `[cmder_root]/vendor` is not recommended since you will need to re-apply these changes after any upgrade.  All user customizations should go in `[cmder_root]/config` folder.  3.  Delete the `[cmder_root]/vendor` folder. 4.  Extract the new `cmder.zip` or `cmder_mini.zip` into `[cmder_root]/` overwriting all files when prompted.  If you do not have a `[cmder_root]/config/user[-|_]conemu.xml`, you are running an older version of cmder, follow the below process:  1. Exit all Cmder sessions and backup `[cmder_root]/vendor/conemu-maximus5/conemu.xml` to `[cmder_root]/config/user[-|_]conemu.xml`.  2. Backup any files you have manually edited under `[cmder_root]/vendor`.     * Editing files under `[cmder_root]/vendor` is not recommended since you will need to re-apply these changes after any upgrade.  All user customizations should go in `[cmder_root]/config` folder.  3.  Delete the `[cmder_root]/vendor` folder. 4.  Extract the new `cmder.zip` or `cmder_mini.zip` into `[cmder_root]/` overwriting all files when prompted.  ## Current development builds  You can download builds of the current development branch by going to AppVeyor via the following link:  [![AppVeyor](https://ci.appveyor.com/api/projects/status/github/cmderdev/cmder?svg=True)](https://ci.appveyor.com/project/MartiUK/cmder/branch/master/artifacts)  ## License  All software included is bundled with own license  The MIT License (MIT)  Copyright (c) 2016 Samuel Vasko  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "html_url": "https://github.com/Ch-Jad/CH-JaDi-Rajput1", "clone_url": "https://github.com/Ch-Jad/CH-JaDi-Rajput1.git", "stars": 18, "forks": 3, "language": null, "created_at": "2022-08-16T06:04:07+00:00", "updated_at": "2025-10-05T17:31:04+00:00", "size": 9, "topics": [], "search_keyword": "config merge"}, {"name": "VGTabMerge", "full_name": "corpnewt/VGTabMerge", "owner": "corpnewt", "description": "Small py script to merge aty_properties from a VGTab injector kext to the config.plist -> Devices -> Properties for WEG injection.", "html_url": "https://github.com/corpnewt/VGTabMerge", "clone_url": "https://github.com/corpnewt/VGTabMerge.git", "stars": 16, "forks": 2, "language": "Python", "created_at": "2019-01-02T22:11:35+00:00", "updated_at": "2025-09-14T20:56:36+00:00", "size": 168, "topics": [], "search_keyword": "config merge"}, {"name": "ilexconf", "full_name": "vduseev/ilexconf", "owner": "vduseev", "description": "Configuration Library for Python \ud83d\udd27 Load and merge from multiple sources", "html_url": "https://github.com/vduseev/ilexconf", "clone_url": "https://github.com/vduseev/ilexconf.git", "stars": 15, "forks": 0, "language": "Python", "created_at": "2020-10-03T10:51:41+00:00", "updated_at": "2024-02-02T20:06:41+00:00", "size": 1181, "topics": ["configuration", "config", "settings", "python", "json", "env", "yaml", "toml", "merge"], "search_keyword": "config merge"}, {"name": "yaml-updater", "full_name": "xvik/yaml-updater", "owner": "xvik", "description": "Yaml configuration merge tool", "html_url": "https://github.com/xvik/yaml-updater", "clone_url": "https://github.com/xvik/yaml-updater.git", "stars": 14, "forks": 6, "language": "Java", "created_at": "2021-08-26T11:49:07+00:00", "updated_at": "2025-10-10T08:17:49+00:00", "size": 849, "topics": ["yaml", "dropwizard", "config", "migration-tool"], "search_keyword": "config merge"}, {"name": "ribbot", "full_name": "rust-in-blockchain/ribbot", "owner": "rust-in-blockchain", "description": "Script for querying merged PRs, open issues, and closed issues from config repos.", "html_url": "https://github.com/rust-in-blockchain/ribbot", "clone_url": "https://github.com/rust-in-blockchain/ribbot.git", "stars": 12, "forks": 9, "language": "Rust", "created_at": "2020-01-22T07:08:41+00:00", "updated_at": "2024-05-01T04:05:20+00:00", "size": 184, "topics": [], "search_keyword": "config merge"}]}